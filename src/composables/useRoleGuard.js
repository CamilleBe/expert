// src/composables/useRoleGuard.js

import { useUserStore } from '@/stores/user.js'
import { useRouter } from 'vue-router'

/**
 * Composable pour g√©rer la protection des routes bas√©e sur les r√¥les
 * Redirige vers une page 404 si l'acc√®s n'est pas autoris√© (pour brouiller les pistes)
 */
export function useRoleGuard() {
  const userStore = useUserStore()
  const router = useRouter()

  /**
   * V√©rifier si l'utilisateur a le r√¥le requis
   * @param {string|array} allowedRoles - R√¥le(s) autoris√©(s) pour acc√©der √† la route
   * @returns {boolean} - True si l'acc√®s est autoris√©
   */
  const hasPermission = (allowedRoles) => {
    // Si pas d'utilisateur connect√©, pas d'acc√®s
    if (!userStore.isAuthenticated || !userStore.userType) {
      return false
    }

    // Convertir en array si c'est un string
    const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles]
    
    // V√©rifier si le r√¥le de l'utilisateur est dans la liste des r√¥les autoris√©s
    return roles.includes(userStore.userType)
  }

  /**
   * Prot√©ger une route en v√©rifiant les r√¥les autoris√©s
   * Redirige vers 404 si l'acc√®s n'est pas autoris√©
   * @param {string|array} allowedRoles - R√¥le(s) autoris√©(s)
   * @param {string} redirectTo - Route de redirection (par d√©faut: 404)
   */
  const guardRoute = (allowedRoles, redirectTo = '/404') => {
    console.log('üõ°Ô∏è V√©rification des permissions de route...')
    console.log('üë§ Utilisateur connect√©:', userStore.isAuthenticated)
    console.log('üé≠ R√¥le utilisateur:', userStore.userType)
    console.log('‚úÖ R√¥les autoris√©s:', allowedRoles)

    if (!hasPermission(allowedRoles)) {
      console.log('‚ùå Acc√®s refus√© - Redirection vers 404')
      
      // Petite temporisation pour √©viter les redirections trop rapides
      setTimeout(() => {
        router.push(redirectTo)
      }, 100)
      
      return false
    }

    console.log('‚úÖ Acc√®s autoris√©')
    return true
  }

  /**
   * V√©rifier si l'utilisateur peut acc√©der √† un dashboard sp√©cifique
   * @param {string} dashboardType - Type de dashboard ('client', 'artisan', 'amo')
   * @returns {boolean}
   */
  const canAccessDashboard = (dashboardType) => {
    const roleMapping = {
      'client': 'client',
      'artisan': 'artisan', 
      'amo': 'amo'
    }

    const requiredRole = roleMapping[dashboardType]
    return hasPermission(requiredRole)
  }

  /**
   * Rediriger l'utilisateur vers le bon dashboard selon son r√¥le
   */
  const redirectToCorrectDashboard = () => {
    if (!userStore.isAuthenticated) {
      router.push('/connexion')
      return
    }

    const dashboardRoutes = {
      'client': '/dashboard',
      'artisan': '/artisan-dashboard',
      'amo': '/amo-dashboard'
    }

    const correctRoute = dashboardRoutes[userStore.userType]
    if (correctRoute && router.currentRoute.value.path !== correctRoute) {
      console.log(`üîÑ Redirection vers le dashboard ${userStore.userType}:`, correctRoute)
      router.push(correctRoute)
    }
  }

  /**
   * Hook pour prot√©ger automatiquement une route lors de l'entr√©e
   * √Ä utiliser dans le composant avec onMounted
   * @param {string|array} allowedRoles - R√¥les autoris√©s
   */
  const protectRoute = (allowedRoles) => {
    // Attendre que le store soit initialis√©
    const checkAccess = () => {
      if (!guardRoute(allowedRoles)) {
        return false
      }
      return true
    }

    // V√©rification imm√©diate
    if (userStore.isAuthenticated !== null) {
      return checkAccess()
    }

    // Si l'√©tat d'auth n'est pas encore d√©termin√©, attendre un peu
    setTimeout(() => {
      checkAccess()
    }, 500)

    return true
  }

  return {
    hasPermission,
    guardRoute,
    canAccessDashboard,
    redirectToCorrectDashboard,
    protectRoute
  }
}

// Fonction utilitaire pour les navigation guards du router
export function createRoleGuard(allowedRoles) {
  return (to, from, next) => {
    const userStore = useUserStore()
    
    console.log(`üõ°Ô∏è Navigation guard - Route: ${to.path}`)
    console.log(`üë§ Utilisateur: ${userStore.isAuthenticated ? userStore.userType : 'non connect√©'}`)
    console.log(`‚úÖ R√¥les autoris√©s:`, allowedRoles)

    // V√©rifier l'authentification
    if (!userStore.isAuthenticated) {
      console.log('‚ùå Non authentifi√© - Redirection vers 404')
      next('/404')
      return
    }

    // V√©rifier les permissions
    const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles]
    if (!roles.includes(userStore.userType)) {
      console.log('‚ùå R√¥le non autoris√© - Redirection vers 404')
      next('/404')
      return
    }

    console.log('‚úÖ Acc√®s autoris√©')
    next()
  }
}